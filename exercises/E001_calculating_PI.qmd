---
title: "E001: Calculating PI"
author: "Hubert Baechli"
date: 2025-02-26
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
GAP <- 1
```

## Programming exercise

In contrast to the simple method described below, the first exercise should calculates our own PI.

```{r}
pi
```

The following is a step-by-step guide to putting the first programming skills from the lesson into practice.

## Basic idea

As Ven showed in the first lesson...

... if we throw thousands of random placed darts into a square field, the number of darts that fall into the enclosed circle should represent the area of that circle in relation to the area of the square.

In the following we will try to confirm this with our own programming skills.

### 1. Step

Generation of a random position for a single dart within a square. The square extends from -1 to +1 in the X-direction, as well as in the Y-direction.\
Use a random number generator for a uniform distribution and save the result in the two variables x and y (GAP are placeholder)

```{r}
x <- runif(n = GAP, min = GAP, max = GAP)
y <- GAP
```

```{r echo=FALSE}
x <- runif(n = 1, min = -1, max = 1)
y <- runif(n = 1, min = -1, max = 1)
```

### 2. Step

Now calculate the distance from this position to the center. You can use the following simplified formula for our chosen square

```{r}
dist <- x**2 + y**2
print(dist)
```

### 3. Step

Create a decision rule and print "inside" if the point is inside the circle or "outside" if it is not.

```{r, results="hide", message=FALSE, warning=FALSE}
if (dist <= GAP) {
  GAP
} else {
  GAP
}
```

```{r echo = FALSE, results="hide", message=FALSE, warning=FALSE}
if (dist <= 1) {
  print("inside")
} else {
  print("outside")
}
```

### 4. Step

Create now a loop (use for or while statement) and execute the code from steps 1 to 3 within it. You should get something like that now

*Hint: Use may 10 iteration for the beginning*

```{r echo = FALSE}
for (i in 1:10) {
  x <- runif(n = 1, min = -1, max = 1)
  y <- runif(n = 1, min = -1, max = 1)
  dist <- x**2 + y**2
  if (dist <= 1) {
    print("inside")
  } else {
    print("outside")
  }
}
```

### 5. Step

Copy now the code from Step 4 and modify it in a way that instead of outputting a result for each point, it sums up the number of "insides".

Use something like that,

```{r}
n_insides <- 0
n_insides <- n_insides + 1
print(n_insides)
```

or more elegant write the results in a vector.

```{r}
v_insides <- rep(x = 0, 10)
v_insides[2] <- 1
print(v_insides)
```

If you use 1000 iteration you should became such a number

```{r, echo = FALSE, message=FALSE, warning=FALSE}
n <- 1000
v_insides <- rep(x = 0, n)
for (i in 1:n) {
  x <- runif(n = 1, min = -1, max = 1)
  y <- runif(n = 1, min = -1, max = 1)
  dist <- x**2 + y**2
  if (dist <= 1) {
    v_insides[i] <- 1
  }
}
sum(v_insides)
```

## Final Step

As the final step, you now need to calculate PI from your result and compare it with the real one ;-)

```{r echo = FALSE}
selfmade_pi <- sum(v_insides) / length(v_insides) * 4
```

```{r}
print(selfmade_pi)
if (selfmade_pi == pi) {
  print("YOU ARE UNBELIEFABLE")
} else {
  print("Try more iterations !!! (or try the function round)")
}
```
