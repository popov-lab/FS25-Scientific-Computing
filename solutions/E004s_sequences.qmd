---
title: "E004: Vectors & Sequences"
author: "Hubert Baechli"
date: "2025-03-08"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
GAP <- 1
```

# Programming exercise

Below are some exercises that should help you learn the most important basic built in functions and how to incorporate them into your own functions. This sheet focuses on vectors and how the easily generated.

## 1. by Sequences (easy)

The most challenging aspect of R is probably its flexibility. All these lines do exactly the same thing!

```{r}
vec_z <- 1:6
vec_z <- seq(1, 6)
vec_z <- seq(1, 6, 1)
vec_z <- seq(from = 1, to = 6, by = 1)
vec_z <- seq_len(6)
vec_z
```

***Try to generate this sequence***

```{r, echo = FALSE}
vec_z <- seq(from = 1, to = 6, by = 2)
vec_z
```

::: callout-tip
#### Solution:
```{r}
seq(from = 1, to = 6, by = 2)
```
:::

## 2. by Repetitions (medium)

A second way to generate vectors is by using this:

```{r}
rep(x = 5, times = 4)
```

***Try to generate this sequence***

```{r, echo=FALSE}
vec_z2 <- rep(x = c(1, 3), times = 4)
vec_z2
```

::: callout-tip
#### Solution:
```{r}
rep(x = c(1, 3), times = 4)
```
:::

***And try now to generate this sequence with the same function***

Hint: you will need a other parameter then times (?rep)

```{r, echo=FALSE}
vec_z2 <- rep(x = c(1, 3), each = 4)
vec_z2
```

::: callout-tip
#### Solution:
```{r}
rep(x = c(1, 3), each = 4)
```
:::

## 3. Repetitions each (medium)

As you can see, the built-in functions are very flexible and can define many different vectors. Now for something trickier.

Create a function that takes a single integer `n` and generates a sequence with all natural numbers from 1 to `n`, such that each number x is repeated x number of times. Here are some examples of desired output:

```{r, echo=FALSE}
incremental_seq <- function(n) {
  x <- seq_len(n)
  rep(x, x)
}
```

```{r}
incremental_seq(1)
incremental_seq(2)
incremental_seq(3)
incremental_seq(4)
incremental_seq(5)
```

::: callout-warning
#### Hint:
Read carefully the documentation for the `rep` function by typing `?rep` or `help(rep)` in the R console. Specifically look at the explanation of the `times` argument in the *Details* section. What happens when `times` is not a single number but a vector instead?
:::

::: callout-tip
#### Solution:
```{r}
incremental_seq <- function(n) {
  x <- seq_len(n)
  rep(x, x)
}
```
:::

## 4. Count repetitions (harder)

In this task you have to do almost the reverse of the previous. Given a vector of items, determine how often each item is repeated in an uninterupted sequence and print a summary. Example output:

```{r, echo=FALSE}
summarise_reps <- function(x) {
  rle_list <- rle(x)
  values <- rle_list$values
  reps <- rle_list$lengths
  smry <- paste0("Value: ", values, ", Reps: ", reps, collapse = "\n")
  cat(smry)
}
```

```{r}
summarise_reps(c("A", "A", "A", "B", "C", "C", "M", "M", "M", "M", "A", "A"))
```

::: callout-warning
#### Hint:
You can do this with low-level functions. You could also search for a concept called "Run Length Encoding". Is there a base R function that computes the run length encoding? What type of object does it return? How can you extract the information you need from that object?
:::

::: callout-tip
#### Feasible solution:
```{r}
summarise_reps <- function(x) {
  rle_list <- rle(x)
  values <- rle_list$values
  reps <- rle_list$lengths
  smry <- paste0("Value: ", values, ", Reps: ", reps, collapse = "\n")
  cat(smry)
}
```
:::
